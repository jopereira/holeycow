*********************Installing XEN and Compiling Holey COW******************

Download XEN-3.3.0 Source Package.

For ubuntu the Source package is located at: http://packages.ubuntu.com/source/hardy-backports/xen-3.3

mv Holeycode/BlktapController.py xen-src/tools/python/xen/xend/server/

mv Holeycode/* xen-src/tools/blktap/drivers/ (here move all files except BlktapController.py and the folder images/templates)

Before compiling XEN kernel you must configure some options

Open xen-src/tools/blktap/drivers/defs.h and edit:

#define HLOG -> path for log file
#define HSTDERR -> path for stderr file
#define NSLAVES -> number of slaves that will run
#define MASTER_ADD -> master ip address
#define COW_DIR -> path where slaves snapshots will be kept

Every time you change these options the kernel mus be compiled.
In the next version these options will be given differently.

Compile Xen kernel.

IN ubuntu to compile source package do:

cd xen-src/
dpkg-buildpackage
cd ..
dpkg -i *.deb


********************Running Holey COW******************************

After compiling the XEN Kernel.

Create VM image files.

If xen-tools are used this can be done by typing:

xen-create-image --hostname=teste1 --ip=10.0.0.1 --ide --force

Create one image for each slave and another for the writer.

Holey COW tap is configured to work in a VM partition. 
In folder imagestemplates you have a configuration file example for
master and for slave.

The part where is necessary to change is:

root        = '/dev/hda1 ro'
disk        = [
                  'tap:aio:/home/xenholey/domains/teste1/disk.img,hda1,w',
                  'tap:holey:/home/image1,hda2,w',
              ]

/home/xenholey/domains/teste1/disk.img is the path to the VM image. We use XEN tap:aio to manage this virtual disk.

/home/image1 is the path to the file that will be controlled by Holey COW tap.

the file image1 (for master) and image0 (for slave) must be created by doing:

dd if=/dev/zero of=/home/image0 bs=4K count=1 seek=1K (The size here doesn't matter)
dd if=/dev/zero of=/home/image1 bs=4K count=1 seek=1K (The size here doesn't matter)

These files are only necessary for the Tap driver to understand if the VM is a slave or master. 
if it is master the file name must end with 1. If it is a slave it must end with 0.

The file that will be used as the real partition that will be written by the master is created by doing:

dd if=/dev/zero of=/home/image bs=4K count=1 seek=3M (Here the size must be the one we want the partition to have)

ATTENTION!! - This last file must have the same name of the bogus files without the last number.
In the example given above, we create a file named image that will be the partition written by the master VM.
We created two dummy files, image0 and image1, that will be neeeded by the VMs cnfiguration files to define the master and the slaves.

This detail will also be changed in a future version.

Finally, we need to run The VMs.

xm create -c masterconffile.cfg (launch master VM)

Master VM will block until slave VM is launched.

It is important to launch first the master, wait a few seconds and then launch the slaves.

xm create -c slaveconffile.cfg (launch slave VM)






